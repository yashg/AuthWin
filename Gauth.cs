// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gauth.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gauth.proto</summary>
public static partial class GauthReflection {

  #region Descriptor
  /// <summary>File descriptor for gauth.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GauthReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtnYXV0aC5wcm90byK3AwoQTWlncmF0aW9uUGF5bG9hZBI3Cg5vdHBfcGFy",
          "YW1ldGVycxgBIAMoCzIfLk1pZ3JhdGlvblBheWxvYWQuT3RwUGFyYW1ldGVy",
          "cxIPCgd2ZXJzaW9uGAIgASgFEhIKCmJhdGNoX3NpemUYAyABKAUSEwoLYmF0",
          "Y2hfaW5kZXgYBCABKAUSEAoIYmF0Y2hfaWQYBSABKAUatwEKDU90cFBhcmFt",
          "ZXRlcnMSDgoGc2VjcmV0GAEgASgMEgwKBG5hbWUYAiABKAkSDgoGaXNzdWVy",
          "GAMgASgJEi4KCWFsZ29yaXRobRgEIAEoDjIbLk1pZ3JhdGlvblBheWxvYWQu",
          "QWxnb3JpdGhtEg4KBmRpZ2l0cxgFIAEoBRInCgR0eXBlGAYgASgOMhkuTWln",
          "cmF0aW9uUGF5bG9hZC5PdHBUeXBlEg8KB2NvdW50ZXIYByABKAMiLAoJQWxn",
          "b3JpdGhtEhAKDEFMR09fSU5WQUxJRBAAEg0KCUFMR09fU0hBMRABIjYKB090",
          "cFR5cGUSDwoLT1RQX0lOVkFMSUQQABIMCghPVFBfSE9UUBABEgwKCE9UUF9U",
          "T1RQEAJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MigrationPayload), global::MigrationPayload.Parser, new[]{ "OtpParameters", "Version", "BatchSize", "BatchIndex", "BatchId" }, null, new[]{ typeof(global::MigrationPayload.Types.Algorithm), typeof(global::MigrationPayload.Types.OtpType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MigrationPayload.Types.OtpParameters), global::MigrationPayload.Types.OtpParameters.Parser, new[]{ "Secret", "Name", "Issuer", "Algorithm", "Digits", "Type", "Counter" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class MigrationPayload : pb::IMessage<MigrationPayload> {
  private static readonly pb::MessageParser<MigrationPayload> _parser = new pb::MessageParser<MigrationPayload>(() => new MigrationPayload());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MigrationPayload> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GauthReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MigrationPayload() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MigrationPayload(MigrationPayload other) : this() {
    otpParameters_ = other.otpParameters_.Clone();
    version_ = other.version_;
    batchSize_ = other.batchSize_;
    batchIndex_ = other.batchIndex_;
    batchId_ = other.batchId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MigrationPayload Clone() {
    return new MigrationPayload(this);
  }

  /// <summary>Field number for the "otp_parameters" field.</summary>
  public const int OtpParametersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MigrationPayload.Types.OtpParameters> _repeated_otpParameters_codec
      = pb::FieldCodec.ForMessage(10, global::MigrationPayload.Types.OtpParameters.Parser);
  private readonly pbc::RepeatedField<global::MigrationPayload.Types.OtpParameters> otpParameters_ = new pbc::RepeatedField<global::MigrationPayload.Types.OtpParameters>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MigrationPayload.Types.OtpParameters> OtpParameters {
    get { return otpParameters_; }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 2;
  private int version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "batch_size" field.</summary>
  public const int BatchSizeFieldNumber = 3;
  private int batchSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BatchSize {
    get { return batchSize_; }
    set {
      batchSize_ = value;
    }
  }

  /// <summary>Field number for the "batch_index" field.</summary>
  public const int BatchIndexFieldNumber = 4;
  private int batchIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BatchIndex {
    get { return batchIndex_; }
    set {
      batchIndex_ = value;
    }
  }

  /// <summary>Field number for the "batch_id" field.</summary>
  public const int BatchIdFieldNumber = 5;
  private int batchId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BatchId {
    get { return batchId_; }
    set {
      batchId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MigrationPayload);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MigrationPayload other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!otpParameters_.Equals(other.otpParameters_)) return false;
    if (Version != other.Version) return false;
    if (BatchSize != other.BatchSize) return false;
    if (BatchIndex != other.BatchIndex) return false;
    if (BatchId != other.BatchId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= otpParameters_.GetHashCode();
    if (Version != 0) hash ^= Version.GetHashCode();
    if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
    if (BatchIndex != 0) hash ^= BatchIndex.GetHashCode();
    if (BatchId != 0) hash ^= BatchId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    otpParameters_.WriteTo(output, _repeated_otpParameters_codec);
    if (Version != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Version);
    }
    if (BatchSize != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BatchSize);
    }
    if (BatchIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BatchIndex);
    }
    if (BatchId != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BatchId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += otpParameters_.CalculateSize(_repeated_otpParameters_codec);
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    if (BatchSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSize);
    }
    if (BatchIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchIndex);
    }
    if (BatchId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MigrationPayload other) {
    if (other == null) {
      return;
    }
    otpParameters_.Add(other.otpParameters_);
    if (other.Version != 0) {
      Version = other.Version;
    }
    if (other.BatchSize != 0) {
      BatchSize = other.BatchSize;
    }
    if (other.BatchIndex != 0) {
      BatchIndex = other.BatchIndex;
    }
    if (other.BatchId != 0) {
      BatchId = other.BatchId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          otpParameters_.AddEntriesFrom(input, _repeated_otpParameters_codec);
          break;
        }
        case 16: {
          Version = input.ReadInt32();
          break;
        }
        case 24: {
          BatchSize = input.ReadInt32();
          break;
        }
        case 32: {
          BatchIndex = input.ReadInt32();
          break;
        }
        case 40: {
          BatchId = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the MigrationPayload message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Algorithm {
      [pbr::OriginalName("ALGO_INVALID")] AlgoInvalid = 0,
      [pbr::OriginalName("ALGO_SHA1")] AlgoSha1 = 1,
    }

    public enum OtpType {
      [pbr::OriginalName("OTP_INVALID")] OtpInvalid = 0,
      [pbr::OriginalName("OTP_HOTP")] OtpHotp = 1,
      [pbr::OriginalName("OTP_TOTP")] OtpTotp = 2,
    }

    public sealed partial class OtpParameters : pb::IMessage<OtpParameters> {
      private static readonly pb::MessageParser<OtpParameters> _parser = new pb::MessageParser<OtpParameters>(() => new OtpParameters());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<OtpParameters> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::MigrationPayload.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public OtpParameters() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public OtpParameters(OtpParameters other) : this() {
        secret_ = other.secret_;
        name_ = other.name_;
        issuer_ = other.issuer_;
        algorithm_ = other.algorithm_;
        digits_ = other.digits_;
        type_ = other.type_;
        counter_ = other.counter_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public OtpParameters Clone() {
        return new OtpParameters(this);
      }

      /// <summary>Field number for the "secret" field.</summary>
      public const int SecretFieldNumber = 1;
      private pb::ByteString secret_ = pb::ByteString.Empty;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString Secret {
        get { return secret_; }
        set {
          secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 2;
      private string name_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Name {
        get { return name_; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "issuer" field.</summary>
      public const int IssuerFieldNumber = 3;
      private string issuer_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Issuer {
        get { return issuer_; }
        set {
          issuer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "algorithm" field.</summary>
      public const int AlgorithmFieldNumber = 4;
      private global::MigrationPayload.Types.Algorithm algorithm_ = 0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::MigrationPayload.Types.Algorithm Algorithm {
        get { return algorithm_; }
        set {
          algorithm_ = value;
        }
      }

      /// <summary>Field number for the "digits" field.</summary>
      public const int DigitsFieldNumber = 5;
      private int digits_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Digits {
        get { return digits_; }
        set {
          digits_ = value;
        }
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 6;
      private global::MigrationPayload.Types.OtpType type_ = 0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::MigrationPayload.Types.OtpType Type {
        get { return type_; }
        set {
          type_ = value;
        }
      }

      /// <summary>Field number for the "counter" field.</summary>
      public const int CounterFieldNumber = 7;
      private long counter_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long Counter {
        get { return counter_; }
        set {
          counter_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as OtpParameters);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(OtpParameters other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Secret != other.Secret) return false;
        if (Name != other.Name) return false;
        if (Issuer != other.Issuer) return false;
        if (Algorithm != other.Algorithm) return false;
        if (Digits != other.Digits) return false;
        if (Type != other.Type) return false;
        if (Counter != other.Counter) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Secret.Length != 0) hash ^= Secret.GetHashCode();
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (Issuer.Length != 0) hash ^= Issuer.GetHashCode();
        if (Algorithm != 0) hash ^= Algorithm.GetHashCode();
        if (Digits != 0) hash ^= Digits.GetHashCode();
        if (Type != 0) hash ^= Type.GetHashCode();
        if (Counter != 0L) hash ^= Counter.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Secret.Length != 0) {
          output.WriteRawTag(10);
          output.WriteBytes(Secret);
        }
        if (Name.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Name);
        }
        if (Issuer.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(Issuer);
        }
        if (Algorithm != 0) {
          output.WriteRawTag(32);
          output.WriteEnum((int) Algorithm);
        }
        if (Digits != 0) {
          output.WriteRawTag(40);
          output.WriteInt32(Digits);
        }
        if (Type != 0) {
          output.WriteRawTag(48);
          output.WriteEnum((int) Type);
        }
        if (Counter != 0L) {
          output.WriteRawTag(56);
          output.WriteInt64(Counter);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Secret.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Secret);
        }
        if (Name.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (Issuer.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Issuer);
        }
        if (Algorithm != 0) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Algorithm);
        }
        if (Digits != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
        }
        if (Type != 0) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
        }
        if (Counter != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(Counter);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(OtpParameters other) {
        if (other == null) {
          return;
        }
        if (other.Secret.Length != 0) {
          Secret = other.Secret;
        }
        if (other.Name.Length != 0) {
          Name = other.Name;
        }
        if (other.Issuer.Length != 0) {
          Issuer = other.Issuer;
        }
        if (other.Algorithm != 0) {
          Algorithm = other.Algorithm;
        }
        if (other.Digits != 0) {
          Digits = other.Digits;
        }
        if (other.Type != 0) {
          Type = other.Type;
        }
        if (other.Counter != 0L) {
          Counter = other.Counter;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Secret = input.ReadBytes();
              break;
            }
            case 18: {
              Name = input.ReadString();
              break;
            }
            case 26: {
              Issuer = input.ReadString();
              break;
            }
            case 32: {
              algorithm_ = (global::MigrationPayload.Types.Algorithm) input.ReadEnum();
              break;
            }
            case 40: {
              Digits = input.ReadInt32();
              break;
            }
            case 48: {
              type_ = (global::MigrationPayload.Types.OtpType) input.ReadEnum();
              break;
            }
            case 56: {
              Counter = input.ReadInt64();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
